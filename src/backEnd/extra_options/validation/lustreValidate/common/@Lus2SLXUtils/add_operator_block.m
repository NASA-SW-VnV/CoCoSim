%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2019 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 

function add_operator_block(op_path, operator, x, y2, dt)
    switch operator
        case {'+', '-'}
            operator = regexprep(operator,'+','++');
            operator = regexprep(operator,'-','+-');
            add_block('simulink/Math Operations/Add',...
                op_path,...
                'Inputs', operator, ...
                'OutDataTypeStr', dt, ...
                'Position',[(x+200) y2 (x+250) (y2+50)]);
        case 'uminus'
            add_block('simulink/Math Operations/Gain',...
                op_path,...
                'Gain', '-1', ...
                'OutDataTypeStr', dt, ...
                'Position',[(x+200) y2 (x+250) (y2+50)]);
        case '*'
            add_block('simulink/Math Operations/Product',...
                op_path,...
                'OutDataTypeStr', dt, ...
                'Position',[(x+200) y2 (x+250) (y2+50)]);
        case '/'
            add_block('simulink/Math Operations/Divide',...
                op_path,...
                'OutDataTypeStr', dt, ...
                'Position',[(x+200) y2 (x+250) (y2+50)]);
        case 'mod'
%             add_block('simulink/Math Operations/Math Function',...
%                 op_path,...
%                 'Operator', 'rem',...
%                 'OutDataTypeStr', dt, ...
%                 'Position',[(x+200) y2 (x+250) (y2+50)]);
            % I assume mod is mode of int_div_euclidean option enabled in lustrec
            % it's the mathematical mod and not C language mod.
            if ~bdIsLoaded('pp_lib'); load_system('pp_lib.slx'); end
            add_block('pp_lib/mode_int_div_euclidean_lustrec',...
                op_path,...
                'Position',[(x+200) y2 (x+250) (y2+50)]);
        case {'&&', '||', 'xor', 'not'}
            operator = regexprep(operator,'&&','AND');
            operator = regexprep(operator,'||','OR');
            operator = regexprep(operator,'xor','XOR');
            operator = regexprep(operator,'not','NOT');
            add_block('simulink/Logic and Bit Operations/Logical Operator',...
                op_path,...
                'Operator', operator,...
                'Position',[(x+200) y2 (x+250) (y2+50)]);


        case {'=', '!=', '<','<=', '>=', '>'}
            if strcmp(operator, '='); operator = regexprep(operator,'=','=='); end
            operator = regexprep(operator,'!=','~=');
            operator = regexprep(operator,'<>','~=');
            add_block('simulink/Logic and Bit Operations/Relational Operator',...
                op_path,...
                'Operator', operator,...
                'Position',[(x+200) y2 (x+250) (y2+50)]);

        case 'impl'
            if ~bdIsLoaded('cocosimLibs'); load_system('cocosimLibs.slx'); end
            add_block('cocosimLibs/Implies',...
                op_path,...
                'Position',[(x+200) y2 (x+250) (y2+50)]);
        otherwise
            display_msg(['Unkown operator ' operator], MsgType.ERROR, 'LUS2SLX', '');
    end

end

