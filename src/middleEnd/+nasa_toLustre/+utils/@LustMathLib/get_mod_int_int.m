function [node, external_nodes_i, opens, abstractedNodes] = get_mod_int_int(varargin)
    import nasa_toLustre.lustreAst.*
    opens = {};
    abstractedNodes = {};
    external_nodes_i = {strcat('LustMathLib_', 'abs_int')};
    % format = 'node mod_int_int (x, y: int)\nreturns(z:int);\nlet\n\t';
    % format = [format, 'z = if (y = 0 or x = 0) then x\n\t\telse\n\t\t (x mod y) - (if (x mod y <> 0 and y <= 0) then (if y > 0 then y else -y) else 0);\ntel\n\n'];
    % node = sprintf(format);
    cond = BinaryExpr(...
        BinaryExpr.OR, ...
        BinaryExpr(BinaryExpr.EQ, VarIdExpr('y'), IntExpr(0)), ...
        BinaryExpr(BinaryExpr.EQ, VarIdExpr('x'), IntExpr(0)));
    cond2 = BinaryExpr(...
        BinaryExpr.AND, ...
        BinaryExpr( BinaryExpr.NEQ,...
        BinaryExpr(BinaryExpr.MOD, VarIdExpr('x'), VarIdExpr('y')),...
        IntExpr(0)), ...
        BinaryExpr(BinaryExpr.LTE, VarIdExpr('y'), IntExpr(0)));
    elseExp =  BinaryExpr(...
        BinaryExpr.MINUS, ...
        BinaryExpr(BinaryExpr.MOD, VarIdExpr('x'), VarIdExpr('y')),...
        IteExpr(cond2, ...
        NodeCallExpr('abs_int',  VarIdExpr('y')),...
        IntExpr(0),...
        true)...
        );
    rhs = IteExpr(cond, VarIdExpr('x'), elseExp);
    bodyElts{1} = LustreEq(...
        VarIdExpr('z'), ...
        rhs...
        );
    node = LustreNode();
    node.setName('mod_int_int');
    node.setInputs({LustreVar('x', 'int'), LustreVar('y', 'int')});
    node.setOutputs(LustreVar('z', 'int'));
    node.setBodyEqs(bodyElts);
    node.setIsMain(false);
end