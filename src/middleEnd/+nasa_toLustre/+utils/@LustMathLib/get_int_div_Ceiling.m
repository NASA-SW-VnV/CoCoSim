%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
function [node, external_nodes_i, opens, abstractedNodes] = get_int_div_Ceiling(varargin)
    import nasa_toLustre.lustreAst.*
    opens = {};
    abstractedNodes = {};
    external_nodes_i = {strcat('LustMathLib_', 'abs_int')};
    
    %y = 0
    conds{1} = nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.EQ, nasa_toLustre.lustreAst.VarIdExpr('y'), nasa_toLustre.lustreAst.IntExpr(0));
    %if x>0 then 2147483647 else -2147483648
    thens{1} = nasa_toLustre.lustreAst.IteExpr(...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.IntExpr(0)),...
        nasa_toLustre.lustreAst.IntExpr(2147483647), nasa_toLustre.lustreAst.IntExpr(-2147483648),...
        true);
    % x mod y = 0
    conds{2} = nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.EQ, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.MOD, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.VarIdExpr('y')), ...
        nasa_toLustre.lustreAst.IntExpr(0));
    % x/y
    thens{2} = nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.DIVIDE, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.VarIdExpr('y'));
    %(abs_int(y) > abs_int(x) and x*y>0)
    conds{3} = nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.AND, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, ...
        nasa_toLustre.lustreAst.NodeCallExpr('abs_int', nasa_toLustre.lustreAst.VarIdExpr('y')),...
        nasa_toLustre.lustreAst.NodeCallExpr('abs_int', nasa_toLustre.lustreAst.VarIdExpr('x'))), ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.MULTIPLY, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.VarIdExpr('y')),...
        nasa_toLustre.lustreAst.IntExpr(0))...
        );
    % 1
    thens{3} = nasa_toLustre.lustreAst.IntExpr(1);
    %(abs_int(y) > abs_int(x) and x*y<0)
    conds{4} = nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.AND, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, ...
        nasa_toLustre.lustreAst.NodeCallExpr('abs_int', nasa_toLustre.lustreAst.VarIdExpr('y')),...
        nasa_toLustre.lustreAst.NodeCallExpr('abs_int', nasa_toLustre.lustreAst.VarIdExpr('x'))), ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.LT, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.MULTIPLY, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.VarIdExpr('y')),...
        nasa_toLustre.lustreAst.IntExpr(0))...
        );
    % 0
    thens{4} = nasa_toLustre.lustreAst.IntExpr(0);
    % (x>0 and y < 0)
    conds{5} = nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.AND, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, ...
        nasa_toLustre.lustreAst.VarIdExpr('x'),...
        nasa_toLustre.lustreAst.IntExpr(0)), ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.LT, ...
        nasa_toLustre.lustreAst.VarIdExpr('y'),...
        nasa_toLustre.lustreAst.IntExpr(0))...
        );
    %x/y
    thens{5} = nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.DIVIDE, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.VarIdExpr('y'));
    % (x<0 and y > 0)
    conds{6} = nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.AND, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.LT, ...
        nasa_toLustre.lustreAst.VarIdExpr('x'),...
        nasa_toLustre.lustreAst.IntExpr(0)), ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, ...
        nasa_toLustre.lustreAst.VarIdExpr('y'),...
        nasa_toLustre.lustreAst.IntExpr(0))...
        );
    %(-x)/(-y)
    thens{6} = nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.DIVIDE, ...
        nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.NEG, nasa_toLustre.lustreAst.VarIdExpr('x')), ...
        nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.NEG, nasa_toLustre.lustreAst.VarIdExpr('y')));
    
    % (x < 0 and y < 0)
    conds{7} = nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.AND, ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.LT, ...
        nasa_toLustre.lustreAst.VarIdExpr('x'),...
        nasa_toLustre.lustreAst.IntExpr(0)), ...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.LT, ...
        nasa_toLustre.lustreAst.VarIdExpr('y'),...
        nasa_toLustre.lustreAst.IntExpr(0))...
        );
    %(-x)/(-y) + 1
    thens{7} = nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.PLUS,...
        nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.DIVIDE, ...
        nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.NEG, nasa_toLustre.lustreAst.VarIdExpr('x')), ...
        nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.NEG, nasa_toLustre.lustreAst.VarIdExpr('y'))),...
        nasa_toLustre.lustreAst.IntExpr(1));
    %x/y + 1
    thens{8} = nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.PLUS,...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.DIVIDE, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.VarIdExpr('y')),...
        nasa_toLustre.lustreAst.IntExpr(1));
    bodyElts{1} = nasa_toLustre.lustreAst.LustreEq(...
        nasa_toLustre.lustreAst.VarIdExpr('z'), ...
        nasa_toLustre.lustreAst.IteExpr.nestedIteExpr(conds, thens)...
        );
    node = nasa_toLustre.lustreAst.LustreNode();
    node.setMetaInfo('Rounds positive and negative numbers toward positive infinity');
    node.setName('int_div_Ceiling');
    node.setInputs({nasa_toLustre.lustreAst.LustreVar('x', 'int'), nasa_toLustre.lustreAst.LustreVar('y', 'int')});
    node.setOutputs(nasa_toLustre.lustreAst.LustreVar('z', 'int'));
    node.setBodyEqs(bodyElts);
    node.setIsMain(false);
end
