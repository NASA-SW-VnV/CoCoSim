function [node, external_nodes, opens, abstractedNodes] = get__Convergent(varargin)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %Rounds number to the nearest representable value.
    %If a tie occurs, rounds to the nearest even integer.
    %Equivalent to the Fixed-Point Designer? convergent function.
        opens = {};
    abstractedNodes = {};
    node_name = '_Convergent';
    % y = floor(x+1/2) + ceiling((x-0.5)/2) - floor((x-0.5)/2) - 1
    bodyElts{1} = nasa_toLustre.lustreAst.LustreEq(...
        nasa_toLustre.lustreAst.VarIdExpr('y'), ...
        nasa_toLustre.lustreAst.IteExpr(...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.EQ, nasa_toLustre.lustreAst.VarIdExpr('x'), nasa_toLustre.lustreAst.RealExpr('0.0')),...
        nasa_toLustre.lustreAst.IntExpr(0), ...
        nasa_toLustre.lustreAst.BinaryExpr.BinaryMultiArgs(nasa_toLustre.lustreAst.BinaryExpr.PLUS, {...
        nasa_toLustre.lustreAst.NodeCallExpr('_Floor', nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.PLUS,nasa_toLustre.lustreAst.VarIdExpr('x'),nasa_toLustre.lustreAst.RealExpr('0.5'))), ...
        nasa_toLustre.lustreAst.NodeCallExpr('_Ceiling', nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.DIVIDE,...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.MINUS,nasa_toLustre.lustreAst.VarIdExpr('x'),nasa_toLustre.lustreAst.RealExpr('0.5')),...
        nasa_toLustre.lustreAst.RealExpr(2))), ...
        nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.NEG, ...
        nasa_toLustre.lustreAst.NodeCallExpr('_Floor', nasa_toLustre.lustreAst.BinaryExpr(...
        nasa_toLustre.lustreAst.BinaryExpr.DIVIDE,...
        nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.MINUS,nasa_toLustre.lustreAst.VarIdExpr('x'),nasa_toLustre.lustreAst.RealExpr('0.5')),...
        nasa_toLustre.lustreAst.RealExpr(2)))), ...
        nasa_toLustre.lustreAst.IntExpr(-1)})));
    
    node = nasa_toLustre.lustreAst.LustreNode();
    node.setMetaInfo('--Rounds number to the nearest representable value.');
    node.setName(node_name);
    node.setInputs(nasa_toLustre.lustreAst.LustreVar('x', 'real'));
    node.setOutputs(nasa_toLustre.lustreAst.LustreVar('y', 'int'));
    node.setBodyEqs(bodyElts);
    node.setIsMain(false);
    
    external_nodes = {strcat('LustMathLib_', 'fmod'), ...
        strcat('LustDTLib_', '_Floor'),...
        strcat('LustDTLib_', '_Ceiling')};
    
end
