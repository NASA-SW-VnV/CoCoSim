function [body, vars,coords_node,index_node] = ...
    addBoundNodeCode(blkParams,Breakpoints,input_coords,lus_backend)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Copyright (c) 2017 United States Government as represented by the
    % Administrator of the National Aeronautics and Space Administration.
    % All Rights Reserved.
    % Author: Trinh, Khanh V <khanh.v.trinh@nasa.gov>
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %  This function finds the bounding polytop which is required to define
    %  the shape functions.  For each dimension, there will be 2
    %  breakpoints that surround the coordinate of the interpolation
    %  point in that dimension.  For 2 dimensions, if the table is a
    %  mesh, then the polytop is the rectangle containing the
    %  interpolation point.
    %  For the 'Flat' case, only lower index is needed.  
    %  For the 'Above" case, coords _2 is not needed
    body = {};
    vars = {};    
    indexDataType = 'int';
    BreakpointsForDimension = blkParams.BreakpointsForDimension;
    InterpMethod = blkParams.InterpMethod;
    NumberOfTableDimensions = blkParams.NumberOfTableDimensions;
    % defining nodes bounding element 
    %(coords_node{NumberOfTableDimensions,2}: dim1_low, dim1_high,
    % dim2_low, dim2_high,... dimn_low, dimn_high)

    % finding nodes bounding element
    coords_node = cell(NumberOfTableDimensions,2);
    index_node = cell(NumberOfTableDimensions,2);

    for i=1:NumberOfTableDimensions

        % low node for dimension i
        index_node{i,1} = nasa_toLustre.lustreAst.VarIdExpr(...
            sprintf('index_dim_%d_1',i));
        index_node{i,2} = nasa_toLustre.lustreAst.VarIdExpr(...
            sprintf('index_dim_%d_2',i));
        vars{end+1} = nasa_toLustre.lustreAst.LustreVar(...
            index_node{i,1},indexDataType);
        vars{end+1} = nasa_toLustre.lustreAst.LustreVar(...
            index_node{i,2},indexDataType);
        coords_node{i,1} = nasa_toLustre.lustreAst.VarIdExpr(...
            sprintf('coords_dim_%d_1',i));

        % high node for dimension i
        coords_node{i,2} = nasa_toLustre.lustreAst.VarIdExpr(...
            sprintf('coords_dim_%d_2',i));        
        vars{end+1} = nasa_toLustre.lustreAst.LustreVar(...
            coords_node{i,1},'real');
        if ~strcmp(InterpMethod,'Above')
            vars{end+1} = nasa_toLustre.lustreAst.LustreVar(...
                coords_node{i,2},'real');
        end

        % looking for low node
        cond_index = {};
        then_index = {};
        cond_coords = {};
        then_coords = {};
        numberOfBreakPoint_cond = 0;
        for j=numel(BreakpointsForDimension{i}):-1:1
            if j==numel(BreakpointsForDimension{i})                
                % for extrapolation, we want to use the last 2
                % nodes                
                numberOfBreakPoint_cond = numberOfBreakPoint_cond + 1;
                if nasa_toLustre.blocks.PreLookup_To_Lustre.bpIsInputPort(blkParams)
                    cond_index{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                else
                    epsilon = ...
                        nasa_toLustre.blocks.Lookup_nD_To_Lustre.calculate_eps(...
                        BreakpointsForDimension{i}, j);
                    cond_index{end+1} =  ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                end
                then_index{end+1} = nasa_toLustre.lustreAst.IntExpr(j-1);
                then_coords{end+1} = Breakpoints{i}{j-1};
            else
                numberOfBreakPoint_cond = numberOfBreakPoint_cond + 1;
                if nasa_toLustre.blocks.PreLookup_To_Lustre.bpIsInputPort(blkParams)
                    cond_index{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                else
                    epsilon = ...
                        nasa_toLustre.blocks.Lookup_nD_To_Lustre.calculate_eps(...
                        BreakpointsForDimension{i}, j);
                    cond_index{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE,...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                end
                then_index{end+1} = nasa_toLustre.lustreAst.IntExpr(j);
                then_coords{end+1} = Breakpoints{i}{j};                        
            end
        end                
        then_index{end+1} = nasa_toLustre.lustreAst.IntExpr(1);
        then_coords{end+1} = Breakpoints{i}{1};        
        index_1_rhs = nasa_toLustre.lustreAst.IteExpr.nestedIteExpr(...
            cond_index,then_index);
        coords_1_rhs = nasa_toLustre.lustreAst.IteExpr.nestedIteExpr(...
            cond_coords,then_coords);
        body{end+1} = nasa_toLustre.lustreAst.LustreEq(...
            index_node{i,1}, index_1_rhs);        
        body{end+1} = nasa_toLustre.lustreAst.LustreEq(...
            coords_node{i,1}, coords_1_rhs);

        % looking for high node
        cond_index = {};
        then_index = {};
        cond_coords = {};
        then_coords = {};
        for j=numel(BreakpointsForDimension{i}):-1:1
            if j==numel(BreakpointsForDimension{i})
                if nasa_toLustre.blocks.PreLookup_To_Lustre.bpIsInputPort(blkParams)
                    cond_index{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                else
                    epsilon = ...
                        nasa_toLustre.blocks.Lookup_nD_To_Lustre.calculate_eps(...
                        BreakpointsForDimension{i}, j);
                    cond_index{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                end
                then_index{end+1} = nasa_toLustre.lustreAst.IntExpr((j));
                then_coords{end+1} = Breakpoints{i}{j};
            else
                if nasa_toLustre.blocks.PreLookup_To_Lustre.bpIsInputPort(blkParams)
                    cond_index{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend));
                else
                    epsilon = ...
                        nasa_toLustre.blocks.Lookup_nD_To_Lustre.calculate_eps(...
                        BreakpointsForDimension{i}, j);
                    cond_index{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE,...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                    cond_coords{end+1} = ...
                        nasa_toLustre.lustreAst.BinaryExpr(...
                        nasa_toLustre.lustreAst.BinaryExpr.GTE, ...
                        input_coords{i},Breakpoints{i}{j}, [], ...
                        LusBackendType.isLUSTREC(lus_backend), epsilon);
                end
                then_index{end+1} = nasa_toLustre.lustreAst.IntExpr(j+1);
                then_coords{end+1} = Breakpoints{i}{j+1};
            end
        end
        then_index{end+1} = nasa_toLustre.lustreAst.IntExpr(2);
        then_coords{end+1} = Breakpoints{i}{2};        
        index_2_rhs = ...
            nasa_toLustre.lustreAst.IteExpr.nestedIteExpr(...
            cond_index,then_index);
        coords_2_rhs = nasa_toLustre.lustreAst.IteExpr.nestedIteExpr(...
            cond_coords,then_coords);         
        body{end+1} = ...
            nasa_toLustre.lustreAst.LustreEq(...
            index_node{i,2}, index_2_rhs);
        if ~strcmp(InterpMethod,'Above')
            body{end+1} = ...
                nasa_toLustre.lustreAst.LustreEq(...
                coords_node{i,2}, coords_2_rhs);
        end  
    end
end

