function [ main_node] = condExecSS_To_LusMerge( parent_ir, ss_ir, lus_backend, ...
        hasEnablePort, hasActionPort, hasTriggerPort, isContractBlk, main_sampleTime, xml_trace)
    %condExecSS_To_LusMerge create an external lustre node for
    %enabled/triggered/Action subsystem
    %INPUTS:
    %   ss_ir: The internal representation of the subsystem.
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Copyright (c) 2017 United States Government as represented by the
    % Administrator of the National Aeronautics and Space Administration.
    % All Rights Reserved.
    % Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %L = nasa_toLustre.ToLustreImport.L;% Avoiding importing functions. Use direct indexing instead for safe call
    %import(L{:})
    
    
    % Adding lustre comments tracking the original path
    
    
    % creating node header
    if hasTriggerPort && hasEnablePort
        isEnableORAction = 0;
        isEnableAndTrigger = 1;
    else
        isEnableORAction = 1;
        isEnableAndTrigger = 0;
    end
    is_main_node = 0;
    isMatlabFunction = false;
    [blk_name, node_inputs, node_outputs,...
        node_inputs_withoutDT, node_outputs_withoutDT] = ...
        nasa_toLustre.utils.SLX2LusUtils.extractNodeHeader(parent_ir, ss_ir, is_main_node, ...
        isEnableORAction, isEnableAndTrigger, isContractBlk, isMatlabFunction,...
        main_sampleTime, xml_trace);
    
    
    
    node_name = strcat(blk_name, '_condExecSS');
    
    
    % Body code
    if isEnableAndTrigger
        % the case of enabledTriggered subsystem
        [body, variables] = write_enabled_AND_triggered_action_SS(ss_ir, blk_name, lus_backend, ...
            node_inputs_withoutDT, node_outputs_withoutDT);
    else
        [body, variables] = write_enabled_OR_triggered_OR_action_SS(ss_ir, blk_name, lus_backend, ...
            node_inputs_withoutDT, node_outputs_withoutDT, hasEnablePort, hasActionPort, hasTriggerPort);
        
    end
    comment = nasa_toLustre.lustreAst.LustreComment(...
        sprintf('Original block name: %s', ss_ir.Origin_path), true);
    main_node = nasa_toLustre.lustreAst.LustreNode(...
        comment, ...
        node_name,...
        node_inputs, ...
        node_outputs, ...
        {}, ...
        variables, ...
        body, ...
        is_main_node);
    
end


%%
function [body, variables_cell] =...
        write_enabled_OR_triggered_OR_action_SS(subsys, blk_name, lus_backend,...
        node_inputs_withoutDT, node_outputs_withoutDT, hasEnablePort, hasActionPort, hasTriggerPort, original_node_call)
    %L = nasa_toLustre.ToLustreImport.L;% Avoiding importing functions. Use direct indexing instead for safe call
    %import(L{:})
    % get the original node call
    if ~exist('original_node_call', 'var')
        original_node_call = ...
            nasa_toLustre.lustreAst.NodeCallExpr(blk_name, node_inputs_withoutDT);
    end
    
    
    fields = fieldnames(subsys.Content);
    enablePortsFields = fields(...
        cellfun(@(x) (isfield(subsys.Content.(x),'BlockType')...
        && (strcmp(subsys.Content.(x).BlockType,'EnablePort') ...
        || strcmp(subsys.Content.(x).BlockType,'ActionPort')) ), fields));
    if hasTriggerPort && ~(hasEnablePort && hasActionPort)
        %the case of trigger port only
        is_restart = false;% by default
    else
        if hasEnablePort
            StatesWhenEnabling = subsys.Content.(enablePortsFields{1}).StatesWhenEnabling;
        else
            StatesWhenEnabling = subsys.Content.(enablePortsFields{1}).InitializeStates;
        end
        if strcmp(StatesWhenEnabling, 'reset')
            is_restart = true;
        else
            is_restart = false;
        end
    end
    Outportfields = ...
        fields(cellfun(@(x) (isfield(subsys.Content.(x),'BlockType')...
        && strcmp(subsys.Content.(x).BlockType, 'Outport')), fields));
    variables_cell = {};
    body = {};
    pre_out_vars = {};
    InitialOutputs = {};
    for i=1:numel(Outportfields)
        outport_blk = subsys.Content.(Outportfields{i});
        [outputs_i, outputs_DT_i] =nasa_toLustre.utils.SLX2LusUtils.getBlockOutputsNames(subsys, outport_blk);
        OutputWhenDisabled = outport_blk.OutputWhenDisabled;
        InitialOutput_cell =nasa_toLustre.utils.SLX2LusUtils.getInitialOutput(subsys, outport_blk,...
            outport_blk.InitialOutput, outport_blk.CompiledPortDataTypes.Inport{1}, outport_blk.CompiledPortWidths.Inport);
        for out_idx=1:numel(outputs_i)
            out_name = outputs_i{out_idx}.getId();
            pre_out_name = sprintf('pre_%s',out_name);
            variables_cell{end + 1} = nasa_toLustre.lustreAst.LustreVar(pre_out_name, ...
                outputs_DT_i{out_idx}.getDT());
            pre_out_vars{end+1} = nasa_toLustre.lustreAst.VarIdExpr(pre_out_name);
            InitialOutputs{end+1} = InitialOutput_cell{out_idx};
            if strcmp(OutputWhenDisabled, 'reset') && (hasActionPort || hasEnablePort)
                body{end+1} = nasa_toLustre.lustreAst.LustreEq(nasa_toLustre.lustreAst.VarIdExpr(pre_out_name),...
                    InitialOutput_cell{out_idx});
            else
                body{end+1} = nasa_toLustre.lustreAst.LustreEq(...
                    nasa_toLustre.lustreAst.VarIdExpr(pre_out_name),...
                    nasa_toLustre.lustreAst.IteExpr(nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, ...
                    nasa_toLustre.lustreAst.VarIdExpr(nasa_toLustre.utils.SLX2LusUtils.nbStepStr()),...
                    nasa_toLustre.lustreAst.IntExpr(0)), ...
                    nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.PRE, outputs_i{out_idx}), ...
                    InitialOutput_cell{out_idx}));
            end
        end
    end
    % example of generated code
    % Kind2 Syntax:
    % (node_outputs_withoutDT) = merge( _isEnabled ;
    %  (activate originalNodeName every _isEnabled restart every (_isEnabled and not pre _isEnabled))(inputs);
    %  (pre_NextState_1, 0.0-> pre I) when not _isEnabled ) ;
    %
    % Jkind Syntax:
    % (node_outputs_withoutDT) = condact(_isEnabled, originalNodeName(inputs), 0.0(*Initial Condition for first output*), 0.0(*Initial Condition for Second output*));
    
    if LusBackendType.isJKIND(lus_backend)
        if is_restart
            %Jkind does not have an operator to restart a node memory
            display_msg(sprintf(['Block "%s" is not supported by JKind model checker.', ...
                ' The block has a "reset" option when the Subsystem is reactivated. ', ...
                'This optiont is supported by the other model checks. ', ...
                cocosim_menu.CoCoSimPreferences.getChangeModelCheckerMsg()], ...
                    HtmlItem.addOpenCmd(subsys.Origin_path)), ...
                    MsgType.ERROR, 'condExecSS_To_LusMerge', '');
                return;
        else
            condact_args{1} = nasa_toLustre.lustreAst.VarIdExpr(nasa_toLustre.utils.SLX2LusUtils.isEnabledStr());
            condact_args{2} = original_node_call;
            condact_args = [condact_args, InitialOutputs];
            body{end+1} = nasa_toLustre.lustreAst.LustreEq(node_outputs_withoutDT,...
                nasa_toLustre.lustreAst.CondactExpr(condact_args));
        end
        
    else
        if LusBackendType.isKIND2(lus_backend)
            isEnabledVar =...
                nasa_toLustre.lustreAst.VarIdExpr(nasa_toLustre.utils.SLX2LusUtils.isEnabledStr());
            false_clock = nasa_toLustre.lustreAst.UnaryExpr(...
                nasa_toLustre.lustreAst.UnaryExpr.NOT, isEnabledVar, false);
        else
            clock_var_name = strcat(nasa_toLustre.utils.SLX2LusUtils.isEnabledStr(), '_clock');
            variables_cell{end + 1} = nasa_toLustre.lustreAst.LustreVar(clock_var_name, 'bool clock');
            isEnabledVar = nasa_toLustre.lustreAst.VarIdExpr(clock_var_name);
            body{end+1} = nasa_toLustre.lustreAst.LustreEq(isEnabledVar, ...
                nasa_toLustre.lustreAst.VarIdExpr(nasa_toLustre.utils.SLX2LusUtils.isEnabledStr()));
            false_clock = nasa_toLustre.lustreAst.NodeCallExpr('false', isEnabledVar);
        end
        
        if is_restart
            restart_cond = nasa_toLustre.utils.SLX2LusUtils.getResetCode(...
                'rising', 'bool', isEnabledVar );
        else
            restart_cond = {};
        end
        merge_exprs{1} = nasa_toLustre.lustreAst.ActivateExpr(...
            original_node_call.getNodeName(), original_node_call.getArgs(), ...
            isEnabledVar, is_restart, restart_cond);
        
        merge_exprs{2} = nasa_toLustre.lustreAst.BinaryExpr(...
            nasa_toLustre.lustreAst.BinaryExpr.WHEN ,...
            nasa_toLustre.lustreAst.TupleExpr(pre_out_vars), false_clock);
        if ~LusBackendType.isKIND2(lus_backend)
            % lustrec syntax: merge c (true -> e1) (false -> e2);
            merge_exprs{1} = nasa_toLustre.lustreAst.BinaryExpr(...
                nasa_toLustre.lustreAst.BinaryExpr.MERGEARROW, ...
                nasa_toLustre.lustreAst.BooleanExpr('true'),...
                merge_exprs{1}, false);
            merge_exprs{2} = nasa_toLustre.lustreAst.BinaryExpr(...
                nasa_toLustre.lustreAst.BinaryExpr.MERGEARROW, ...
                nasa_toLustre.lustreAst.BooleanExpr('false'),...
                merge_exprs{2}, false);
        end
        body{end+1} = nasa_toLustre.lustreAst.LustreEq(node_outputs_withoutDT,...
            nasa_toLustre.lustreAst.MergeExpr(isEnabledVar, merge_exprs));
    end
    
end

%%
function [body, variables_cell] = write_enabled_AND_triggered_action_SS(subsys, blk_name, lus_backend,...
        node_inputs_withoutDT, node_outputs_withoutDT)
    
    %L = nasa_toLustre.ToLustreImport.L;% Avoiding importing functions. Use direct indexing instead for safe call
    %import(L{:})
    % get the original node call
    original_node_call = nasa_toLustre.lustreAst.LustreEq(node_outputs_withoutDT, ...
        nasa_toLustre.lustreAst.NodeCallExpr(blk_name, node_inputs_withoutDT));
    
    
    
    fields = fieldnames(subsys.Content);
    
    Outportfields = ...
        fields(cellfun(@(x) (isfield(subsys.Content.(x),'BlockType')...
        && strcmp(subsys.Content.(x).BlockType, 'Outport')), fields));
    variables_cell = {};
    pre_out_str = {};
    inactiveStatement = {};
    for i=1:numel(Outportfields)
        outport_blk = subsys.Content.(Outportfields{i});
        [outputs_i, outputs_DT_i] =nasa_toLustre.utils.SLX2LusUtils.getBlockOutputsNames(subsys, outport_blk);
        OutputWhenDisabled = outport_blk.OutputWhenDisabled;
        InitialOutput_cell =nasa_toLustre.utils.SLX2LusUtils.getInitialOutput(subsys, outport_blk,...
            outport_blk.InitialOutput, ...
            outport_blk.CompiledPortDataTypes.Inport{1}, outport_blk.CompiledPortWidths.Inport);
        for out_idx=1:numel(outputs_i)
            out_name = outputs_i{out_idx}.getId();
            if strcmp(OutputWhenDisabled, 'reset')
                pre_held_name = sprintf('pre_held_%s',out_name);
                variables_cell{end + 1} = nasa_toLustre.lustreAst.LustreVar(pre_held_name, ...
                    outputs_DT_i{out_idx}.getDT());
                pre_out_str{end+1} = nasa_toLustre.lustreAst.LustreEq(...
                    nasa_toLustre.lustreAst.VarIdExpr(pre_held_name),...
                    nasa_toLustre.lustreAst.IteExpr(nasa_toLustre.lustreAst.BinaryExpr(nasa_toLustre.lustreAst.BinaryExpr.GT, ...
                    nasa_toLustre.lustreAst.VarIdExpr(nasa_toLustre.utils.SLX2LusUtils.nbStepStr()),...
                    nasa_toLustre.lustreAst.IntExpr(0)), ...
                    nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.PRE, outputs_i{out_idx}), ...
                    InitialOutput_cell{out_idx}));
                inactiveStatement{end+1} = ...
                    nasa_toLustre.lustreAst.LustreEq(outputs_i{out_idx}, ...
                    nasa_toLustre.lustreAst.VarIdExpr(pre_held_name));
            else
                inactiveStatement{end+1} = ...
                    nasa_toLustre.lustreAst.LustreEq(outputs_i{out_idx}, ...
                    nasa_toLustre.lustreAst.VarIdExpr(sprintf('pre_%s',out_name)));
            end
        end
    end
    %
    % body_template = '\tautomaton triggered_%s\n\t\t';
    % body_template = [body_template, 'state Active_triggered_%s:\n\t\t'];
    % body_template = [body_template, 'unless (not %s) resume Inactive_triggered_%s\n\t\t'];
    % body_template = [body_template, 'let\n\t\t'];
    % body_template = [body_template, ' %s\n\t\t'];%call of subsystem
    % body_template = [body_template, 'tel\n\t\t'];
    % body_template = [body_template, 'state Inactive_triggered_%s:\n\t\t'];
    % body_template = [body_template, 'unless %s resume Active_triggered_%s\n\t\t'];
    % body_template = [body_template, 'let\n\t\t'];
    % body_template = [body_template, ' %s\n\t\t'];%out = pre_out;
    % body_template = [body_template, 'tel\n\t\t'];
    % automaton = sprintf(body_template, ...
    %     blk_name,...
    %     blk_name,...
    %    nasa_toLustre.utils.SLX2LusUtils.isTriggeredStr(), blk_name,...
    %     original_node_call, ...
    %     blk_name,...
    %    nasa_toLustre.utils.SLX2LusUtils.isTriggeredStr(), blk_name,...
    %     inactiveStatement);
    automaton_name = sprintf('triggered_%s', blk_name);
    active_state_name = sprintf('Active_triggered_%s', blk_name);
    inactive_state_name = sprintf('Inactive_triggered_%s', blk_name);
    states{1} = nasa_toLustre.lustreAst.AutomatonState(active_state_name, ...
        {},...
        {nasa_toLustre.lustreAst.AutomatonTransExpr(nasa_toLustre.lustreAst.UnaryExpr(nasa_toLustre.lustreAst.UnaryExpr.NOT, ...
        nasa_toLustre.lustreAst.VarIdExpr(nasa_toLustre.utils.SLX2LusUtils.isTriggeredStr())),...
        false, ...
        inactive_state_name)},...
        {}, ...
        {original_node_call});
    states{2} = nasa_toLustre.lustreAst.AutomatonState(inactive_state_name, ...
        {},...
        {nasa_toLustre.lustreAst.AutomatonTransExpr(nasa_toLustre.lustreAst.VarIdExpr(nasa_toLustre.utils.SLX2LusUtils.isTriggeredStr()),...
        false, ...
        active_state_name)},...
        {}, ...
        inactiveStatement);
    automaton = nasa_toLustre.lustreAst.LustreAutomaton(automaton_name, states);
    
    [bodyEnabledTriggered, variables_str_enabled] =...
        write_enabled_OR_triggered_OR_action_SS(subsys, blk_name,lus_backend, ...
        node_inputs_withoutDT, node_outputs_withoutDT, 1, 0, 0, automaton);
    body = [pre_out_str, bodyEnabledTriggered];
    if ~isempty(variables_str_enabled)
        variables_cell = [ variables_str_enabled, variables_cell];
    end
end

