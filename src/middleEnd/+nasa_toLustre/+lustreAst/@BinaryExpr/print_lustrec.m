function code = print_lustrec(obj, backend)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Copyright (c) 2019 United States Government as represented by the
    % Administrator of the National Aeronautics and Space Administration.
    % All Rights Reserved.
    % Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    global ADD_KIND2_TIMES_ABSTRACTION ADD_KIND2_DIVIDE_ABSTRACTION;
    if obj.addEpsilon ...
            && (strcmp(obj.op, '>=') || strcmp(obj.op, '>') ...
            || strcmp(obj.op, '<=') || strcmp(obj.op, '<') ...
            || strcmp(obj.op, '='))
        if strcmp(obj.op, '>=') || strcmp(obj.op, '<=') ...
                || strcmp(obj.op, '=')
            epsilonOp = nasa_toLustre.lustreAst.BinaryExpr.LTE;
            and_or = 'or';
        else
            epsilonOp = nasa_toLustre.lustreAst.BinaryExpr.GT;
            and_or = 'and';
        end
        if isempty(obj.epsilon)
            if isa(obj.left, 'nasa_toLustre.lustreAst.RealExpr')
                obj.epsilon = eps(obj.left.getValue());
            elseif isa(obj.right, 'nasa_toLustre.lustreAst.RealExpr')
                obj.epsilon = eps(obj.right.getValue());
            else
                obj.epsilon = 1e-15;
            end
        end
        code = sprintf('((%s %s %s) %s abs_real(%s - %s) %s %.30f)', ...
            obj.left.print(backend),...
            obj.op, ...
            obj.right.print(backend), ...
            and_or, ...
            obj.left.print(backend),...
            obj.right.print(backend), ...
            epsilonOp, ...
            obj.epsilon);
    else
        if strcmp(obj.operandsDT, 'real') ...
                && strcmp(obj.op, nasa_toLustre.lustreAst.BinaryExpr.MULTIPLY) ...
                && LusBackendType.isKIND2(backend)
            
            ADD_KIND2_TIMES_ABSTRACTION = true;
            code = sprintf('kind2_times(%s, %s)', ...
                obj.left.print(backend),...
                obj.right.print(backend));
        elseif strcmp(obj.operandsDT, 'real') ...
                && strcmp(obj.op, nasa_toLustre.lustreAst.BinaryExpr.DIVIDE) ...
                && LusBackendType.isKIND2(backend)
            
            ADD_KIND2_DIVIDE_ABSTRACTION = true;
            code = sprintf('kind2_divide(%s, %s)', ...
                obj.left.print(backend),...
                obj.right.print(backend));
        else
            if strcmp(obj.op, nasa_toLustre.lustreAst.BinaryExpr.ARROW)
                code = sprintf('(%s) %s (%s)', ...
                    obj.left.print(backend),...
                    obj.op, ...
                    obj.right.print(backend));
            else
                code = sprintf('%s %s %s', ...
                    obj.left.print(backend),...
                    obj.op, ...
                    obj.right.print(backend));
            end
            if obj.withPar
                code = sprintf('(%s)', code);
            end
        end
        
    end
end
