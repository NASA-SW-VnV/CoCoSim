classdef RandomNumber_To_Lustre < Block_To_Lustre
    %RandomNumber_To_Lustre translates the RandomNumber block to a set of
    %random number generated by Matlab
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Copyright (c) 2017 United States Government as represented by the
    % Administrator of the National Aeronautics and Space Administration.
    % All Rights Reserved.
    % Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    properties
    end
    
    methods
        
        function  write_code(obj, parent, blk, xml_trace, varargin)
            [outputs, outputs_dt] = SLX2LusUtils.getBlockOutputsNames(parent, blk, [], xml_trace);
            obj.addVariable(outputs_dt);
            [mean, ~, status] = ...
                Constant_To_Lustre.getValueFromParameter(parent, blk, blk.Mean);
            if status
                display_msg(sprintf('Variable %s in block %s not found neither in Matlab workspace or in Model workspace',...
                    blk.Mean, blk.Origin_path), ...
                    MsgType.ERROR, 'Constant_To_Lustre', '');
                return;
            end
            [variance, ~, status] = ...
                Constant_To_Lustre.getValueFromParameter(parent, blk, blk.Variance);
            if status
                display_msg(sprintf('Variable %s in block %s not found neither in Matlab workspace or in Model workspace',...
                    blk.Variance, blk.Origin_path), ...
                    MsgType.ERROR, 'Constant_To_Lustre', '');
                return;
            end
            a = mean - 2.57*sqrt(variance);
            b = mean + 2.57*sqrt(variance);
            nbSteps = 100/blk.CompiledSampleTime(1);
            r = a + (b-a).*rand(nbSteps,1);
            blk_name = SLX2LusUtils.node_name_format(blk);
            obj.addExtenal_node(RandomNumber_To_Lustre.randomNode(blk_name, r));
            
            clk_name = sprintf('%s_clock', blk_name);
            obj.addVariable(sprintf('%s:bool clock;', clk_name));
            obj.addExternal_libraries('_make_clock');
            codes = {};
            codes{1} = sprintf('%s = _make_clock(%.0f, %.0f);\n\t', ...
                clk_name, 100, 0);
            % generating 100 random random that will be repeated each 100
            % steps
            codes{2} = sprintf('%s = %s(true) every %s;\n\t', outputs{1},...
                blk_name, clk_name);
            
            obj.setCode( MatlabUtils.strjoin(codes, ''));
        end
        
        function options = getUnsupportedOptions(obj, parent, blk, varargin)
            options = obj.unsupported_options;
        end
    end
    methods(Static)
        function node = randomNode(blk_name, r)
            
            format = 'node %s (b:bool)\nreturns(r:real);\n';
            format = [format, '-- add contract here for Kind2 telling it''s a random block generator\n'];
            format = [format, 'let\n\t'];
            format = [format, 'r = %s; \n'];
            format = [format, 'tel\n\n'];
            node = sprintf(format, blk_name,...
                RandomNumber_To_Lustre.getRandomValues(r, 1));
        end
        function r_str = getRandomValues(r, i)
            if i == numel(r)
                r_str = sprintf('%.4f', r(i));
            else
                r_str = sprintf('%.4f -> pre (\n\t\t%s)',...
                    r(i), RandomNumber_To_Lustre.getRandomValues(r, i+1));
            end
        end
    end
end

