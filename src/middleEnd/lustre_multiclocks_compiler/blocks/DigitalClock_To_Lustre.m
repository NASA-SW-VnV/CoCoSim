classdef DigitalClock_To_Lustre < Block_To_Lustre
    %DigitalClock translates the DigitalClock block to external node
    %discretizing simulation time.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Copyright (c) 2017 United States Government as represented by the
    % Administrator of the National Aeronautics and Space Administration.
    % All Rights Reserved.
    % Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    properties
    end
    
    methods
        
        function  write_code(obj, parent, blk, xml_trace, main_sampleTime, varargin)
            [outputs, outputs_dt] = SLX2LusUtils.getBlockOutputsNames(parent, blk, [], xml_trace);
            obj.addVariable(outputs_dt);
            [digitalsampleTime, ~, status] = ...
                Constant_To_Lustre.getValueFromParameter(parent, blk, blk.SampleTime);
            if status
                display_msg(sprintf('Variable %s in block %s not found neither in Matlab workspace or in Model workspace',...
                    blk.SampleTime, blk.Origin_path), ...
                    MsgType.ERROR, 'Constant_To_Lustre', '');
                return;
            end
            obj.addExternal_libraries('BlocksLib__DigitalClock');
            % normalize digitalsampleTime to number of steps
            digitalsampleTime = digitalsampleTime / main_sampleTime(1);
            
            blk_name = SLX2LusUtils.node_name_format(blk);
            codes = {};
            
            % ctc: clockTickCounter
            % ctc = 0 -> if (pre ctc >= digitalsampleTime-1) then 0 else pre ctc +1;
            ctc = VarIdExpr(sprintf('counter_%s', blk_name));   
            pre_ctc = UnaryExpr(UnaryExpr.PRE, ctc);
            cond1 = BinaryExpr(...
                BinaryExpr.GTE, ...
                pre_ctc, ...
                BinaryExpr(...
                    BinaryExpr.MINUS, ...
                    IntExpr(digitalsampleTime), ...
                    IntExpr(1)));
            else1 = BinaryExpr(...
                BinaryExpr.PLUS, ...
                UnaryExpr(UnaryExpr.PRE, ctc), ...
                IntExpr(1));
            
            codes{end + 1} = LustreEq(...
                ctc, ...
                BinaryExpr(BinaryExpr.ARROW, ...
                           IntExpr(0), ...
                           IteExpr(cond1, ...
                                   IntExpr(0),...
                                   else1)));
                 
            realTime =  VarIdExpr(sprintf('real_time_%s', blk_name));                                
            codes{end + 1} = LustreEq(...
                realTime, ...
                BinaryExpr(BinaryExpr.ARROW, ...
                           RealExpr('0.0'), ...
                           BinaryExpr(BinaryExpr.PLUS, ...
                                      IntExpr(0),...
                                      else1))); 
            cond2 = BinaryExpr(BinaryExpr.EQ,...
                               ctc,...
                               IntExpr(0));
            else2 = BinaryExpr(BinaryExpr.ARROW, ...
                               RealExpr('0.0'), ...
                               UnaryExpr(UnaryExpr.PRE, outputs{1}));
            codes{end + 1} = LustreEq(outputs{1}, ...
                    IteExpr(cond2, ...
                            realTime, ...
                            else2));                
            % 
%                 IntExpr(0), ...
%                 BinaryExpr(BinaryExpr.PLUS, ...
%                 UnaryExpr(UnaryExpr.PRE, ctc), ...
%                 IntExpr(1)))));
%             code = LustreEq(outputs{1}, ...
%                 NodeCallExpr('_DigitalClock', ...
%                 VarIdExpr(SLX2LusUtils.timeStepStr()), ...
%                 RealExpr(digitalsampleTime)));
            %sprintf('%s = _DigitalClock(%s, %.15f);\n\t', outputs{1},...
            %    SLX2LusUtils.timeStepStr(), digitalsampleTime);
            obj.setCode( codes);
        end
        
        function options = getUnsupportedOptions(obj, varargin)
            options = obj.unsupported_options;
        end
    end
    
end

