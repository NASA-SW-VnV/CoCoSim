classdef KIND2MathLib
    %KIND2MathLib This class  is used in getExternalLibrariesNodes function.
    %To abstract some mathematical functions with Kind2 contracts.
    % Function name should be : get_LibraryName. For example a library
    % called int_to_int8 will be handled in get_int_to_int8,
    % the Matlab function should return :
    %   - node: The equivalent lustre node if exists.
    %   - external_nodes: returns external libraries that depends on,
    %       for example _Convergent library depends on _Floor library.
    %   - opens: the open libraries that will be needed, such as conv,
    %       lustrect_math or simulink_math_fcn.
    
    properties
    end
    
    methods(Static)
        
        function [node, external_nodes_i, opens] = template(varargin)
            opens = {};
            external_nodes_i = {};
            node = '';
        end
        
        %% sqrt
        function [node, external_nodes_i] = get_sqrt(varargin)
            opens = {};
            external_nodes_i = {};
            % assume x >= 0.0
            contractElts{1} = ContractAssumeExpr('', ...
                BinaryExpr(BinaryExpr.GTE, VarIdExpr('x'), VarIdExpr('0.0')));
            % guarantee  y >= 0.0
            contractElts{2} = ContractGuaranteeExpr('', ...
                BinaryExpr(BinaryExpr.GTE, VarIdExpr('y'), VarIdExpr('0.0')));
            % guarantee x >= y
            contractElts{3} = ContractGuaranteeExpr('', ...
                BinaryExpr(BinaryExpr.GTE, VarIdExpr('x'), VarIdExpr('y')));
            % guarantee y*y = x
            contractElts{4} = ContractGuaranteeExpr('', ...
                BinaryExpr(BinaryExpr.EQ, ...
                BinaryExpr(BinaryExpr.MULTIPLY, VarIdExpr('y'), VarIdExpr('y')), ...
                VarIdExpr('x')));
            contract = LustreContract();
            contract.setBody(contractElts);
            node = LustreNode(...
                '', ...
                'sqrt',...
                LustreVar('x', 'real'), ...
                LustreVar('y', 'real'), ...
                contract, ...
                {}, ...
                {}, ...
                false);
        end
        %% mod_real
        function [node, external_nodes_i, opens] = get_mod_real(varargin)
            opens = {};
            external_nodes_i = {};
            
            %guarantee  x=0.0 => z = 0.0
            contractElts{1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('x'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('z'), VarIdExpr('0.0'))));
            %guarantee y=0.0 => z = x
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('y'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('z'), VarIdExpr('x'))));
            
            contractElts{end + 1} = LustreComment('sign(x) = sign(y) and abs(x) < abs(y)', false);
            %guarantee 0.0 < x and x < y => z = x 
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.AND, ...
                        BinaryExpr(BinaryExpr.LT, VarIdExpr('0.0'), VarIdExpr('x')), ...
                        BinaryExpr(BinaryExpr.LT, VarIdExpr('x'), VarIdExpr('y'))),...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('z'), VarIdExpr('x'))));
            %guarantee y < x and x < 0.0 => z = x
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.AND, ...
                        BinaryExpr(BinaryExpr.LT, VarIdExpr('y'), VarIdExpr('x')), ...
                        BinaryExpr(BinaryExpr.LT, VarIdExpr('x'), VarIdExpr('0.0'))),...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('z'), VarIdExpr('x'))));
            contractElts{end + 1} = LustreComment('sign(x) <> sign(y) and abs(x) < abs(y)', false);
            %guarantee 0.0 < x and x < -y => z = x + y
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.AND, ...
                        BinaryExpr(BinaryExpr.LT, ...
                            VarIdExpr('0.0'), ...
                            VarIdExpr('x')), ...
                        BinaryExpr(BinaryExpr.LT, ...
                            VarIdExpr('x'),...
                            UnaryExpr(UnaryExpr.NEG, VarIdExpr('y')))),...
                BinaryExpr(BinaryExpr.EQ, ...
                    VarIdExpr('z'), ...
                    BinaryExpr(BinaryExpr.PLUS, VarIdExpr('x'), VarIdExpr('y'))...
                )));
             %guarantee -y < x and x < 0.0 => z = x + y
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.AND, ...
                        BinaryExpr(BinaryExpr.LT, ...
                            UnaryExpr(UnaryExpr.NEG, VarIdExpr('y')), ...
                            VarIdExpr('x')), ...
                        BinaryExpr(BinaryExpr.LT, ...
                            VarIdExpr('x'),...
                            VarIdExpr('0.0'))),...
                BinaryExpr(BinaryExpr.EQ, ...
                    VarIdExpr('z'), ...
                    BinaryExpr(BinaryExpr.PLUS, VarIdExpr('x'), VarIdExpr('y'))...
                )));
            contractElts{end + 1} = LustreComment('sign(z) = sign(y) and abs(z) < abs(y)', false);
            %guarantee y > 0.0 => 0.0 <= z and z < y
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.GT, VarIdExpr('y'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.AND, ...
                        BinaryExpr(BinaryExpr.LTE, VarIdExpr('0.0'), VarIdExpr('z')), ...
                        BinaryExpr(BinaryExpr.LT, VarIdExpr('z'), VarIdExpr('y')))...
                ));
            %guarantee y < 0.0 => y < z and z <= 0.0;
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.LT, VarIdExpr('y'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.AND, ...
                        BinaryExpr(BinaryExpr.LT, VarIdExpr('y'), VarIdExpr('z')), ...
                        BinaryExpr(BinaryExpr.LTE, VarIdExpr('z'), VarIdExpr('0.0')))...
                ));
            contract = LustreContract();
            contract.setBody(contractElts);
            node = LustreNode(...
                '', ...
                'mod_real',...
                {LustreVar('x', 'real'), LustreVar('y', 'real')}, ...
                LustreVar('z', 'real'), ...
                contract, ...
                {}, ...
                {}, ...
                false);
        end
        %% rem_real
        function [node, external_nodes_i, opens] = get_rem_real(varargin)
            opens = {};
            external_nodes_i = {'LustMathLib_abs_real'};
            %guarantee x=0.0 => z = 0.0
            contractElts{1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('x'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('z'), VarIdExpr('0.0'))));
            %guarantee y=0.0 => z = x
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('y'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('z'), VarIdExpr('x'))));
            %abs_real(x) < abs_real(y) => z = x
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.LT, ...
                    NodeCallExpr('abs_real', VarIdExpr('x')), ...
                    NodeCallExpr('abs_real', VarIdExpr('y'))), ...
                BinaryExpr(BinaryExpr.EQ, VarIdExpr('z'), VarIdExpr('x'))));
            %guarantee abs_real(z) < abs_real(y)
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(BinaryExpr.LT, ...
                    NodeCallExpr('abs_real', VarIdExpr('z')), ...
                    NodeCallExpr('abs_real', VarIdExpr('y'))));
            %-- sign(z) = sign(x)
            contractElts{end + 1} = LustreComment('sign(z) = sign(x)', false);
            %guarantee x > 0.0 => z >= 0.0;
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.GT, VarIdExpr('x'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.GTE, VarIdExpr('z'), VarIdExpr('0.0'))));
            %guarantee x < 0.0 => z <= 0.0;
            contractElts{end + 1} = ContractGuaranteeExpr('', ...
                BinaryExpr(...
                BinaryExpr.IMPLIES,...
                BinaryExpr(BinaryExpr.LT, VarIdExpr('x'), VarIdExpr('0.0')), ...
                BinaryExpr(BinaryExpr.LTE, VarIdExpr('z'), VarIdExpr('0.0'))));
            contract = LustreContract();
            contract.setBody(contractElts);
            node = LustreNode(...
                '', ...
                'rem_real',...
                {LustreVar('x', 'real'), LustreVar('y', 'real')}, ...
                LustreVar('z', 'real'), ...
                contract, ...
                {}, ...
                {}, ...
                false);
        end
    end
    
end

