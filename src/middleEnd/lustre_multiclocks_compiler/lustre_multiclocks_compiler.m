function [nom_lustre_file]=lustre_multiclocks_compiler(model_path, const_files)
%Slx2Lus translate Simulink models to Lustre. It is based on
%article : 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% Author: Hamza Bourbouh <hamza.bourbouh@nasa.gov>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% inputs treatment
if ~exist('const_files', 'var')
    const_files = {};
end

if nargin < 1
    display_help_message();
    return;
end

%% initialize outputs
nom_lustre_file = '';

%% Get start time
t_start = now;

%% Get Simulink model full path
model_full_path = which(model_path);

%% Save current path
PWD = pwd;

%% Run constants
SLXUtils.run_constants_files(const_files)


%% Pre-process model
display_msg('Pre-processing', MsgType.INFO, 'Slx2Lus', '');
new_file_name = cocosim_pp(model_full_path);

%% Update model path
if ~strcmp(new_file_name, '')
    model_full_path = new_file_name;
    [model_dir, file_name, ~] = fileparts(model_full_path);
    open(model_full_path);
else
    display_msg('Pre-processing has failed', MsgType.ERROR, 'Slx2Lus', '');
    return;
end

%% Definition of the generated output files names
output_dir = fullfile(model_dir, strcat('lustre_files/src_', file_name));
nom_lustre_file = fullfile(output_dir, strcat(file_name, '.lus'));
if ~exist(output_dir, 'dir'); mkdir(output_dir); end
trace_file_name = fullfile(output_dir, strcat(file_name, '.cocosim.trace.xml'));

create_file_meta_info(nom_lustre_file);

%% Create traceability informations in XML format
display_msg('Start tracebility', MsgType.INFO, 'Slx2Lus', '');
xml_trace = XML_Trace(model_full_path, trace_file_name);
xml_trace.init();


%% Internal representation building %%%%%%
display_msg('Building internal format', MsgType.INFO, 'Slx2Lus', '');
[ir_struct, ~, subs_blks_list, ~] = cocosim_IR(file_name, 1, output_dir);
%% Pre-process IR
[ir_struct] = internalRep_pp(ir_struct, 1, output_dir);





%%%%%%%%%%%%%%% Retrieving nodes code %%%%%%%%%%%%%%%
Utils.update_status('Lustre generation');
display_msg('Lustre generation', Constants.INFO, 'Slx2Lus', '');


end

function display_help_message()
msg = ' -----------------------------------------------------  \n';
msg = [msg '  CoCoSim: Automated Analysis Framework for Simulink/Stateflow\n'];
msg = [msg '   \n Usage:\n'];
msg = [msg '    >> cocoSim(MODEL_PATH, {MAT_CONSTANTS_FILES})\n'];
msg = [msg '\n'];
msg = [msg '      MODEL_PATH: a string containing the full/relative path to the model\n'];
msg = [msg '        e.g. cocoSim(''test/properties/safe_1.mdl'')\n'];
msg = [msg '      MAT_CONSTANT_FILES: an optional list of strings containing the\n'];
msg = [msg '      path to the mat files containing the simulation constants\n'];
msg = [msg '        e.g. {''../../constants1.mat'',''../../constants2.mat''}\n'];
msg = [msg '        default: {}\n'];
msg = [msg  '  -----------------------------------------------------  \n'];
cprintf('blue', msg);
end


function create_file_meta_info(lustre_file)
% Create lustre file
fid = fopen(lustre_file, 'w');
text = '-- This file has been generated by CoCoSim.\n\n';
text = [text, '-- Compiler: Lustre compiler 2 (lustre_multiclocks_compiler.m)'];
text = [text, '-- Time: ', char(datetime)];
fprintf(fid, text);
fclose(fid);
end

