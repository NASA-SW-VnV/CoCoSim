quickstart
==========
Requirements for input models
---------------------------------

In order to use , the model should compile within Simulink, ie. it
should be usable for a simulation. Using Simulink Simulator engine is
the best way to ensure that the model can be compiled. If the Simulink
model refers to constants, these constants should be loaded into the
Matlab workspace.

Some Simulink models use external user-defined libraries. These
constructs are not yet supported and requires them to be *unlinked*.
Another construct, which is supported by , is the Model Referencing
blocks: a model could be used as sub-system, as a reference to the other
model. For simulation and code generation, the referenced model
effectively replaces the Model block that references it. Like libraries,
referenced models allow you to use the same capability repeatedly
without having to redefine it. Referenced models provide several
advantages that are unavailable with subsystems and/or library blocks
(See `Model
Referencing <https://www.mathworks.com/help/simulink/model-reference.html>`__\  [1]_
in Simulink documentation.).

Overview of in practice
---------------------------------

To start using follow these steps or watch https://youtu.be/dcs8GOeFI9c:

#. Launch Matlab

#. If you did not install via toolbox:

   -  Make sure folder ‘cocosim/‘ is added to your path

#. Call in Matlab command window “‘start_cocosim“‘

#. Open your Simulink model

#. Load models constants (as a .m or .mat file) into Matlab Workspace.

#. Make sure your model can be compiled

#. In your Simulink model go to Tools/CoCoSim

   -  A first step checks that all model blocks could be properly
      processed: **“Check unsupported block”**. As a result it produces
      the list of unsupported blocks.

   -  A second step ensures that the produced intermediate form in
      Lustre is compatible with the initial model: **“Compiler
      Validation”**

      -  Some blocks can be abstracted and give different outputs, in
         that case check the generated Lustre code.

   -  If you want to **verify your model requirements**

      #. First *“Create Property”* to introduce a specification block.

         -  a GUI helper eases the definition of the block, provided
            with

            -  the target subsystem

            -  the inputs/outputs required to express the synchronous
               observer

            -  a unique name

            -  some assumptions on inputs, if this is required.

         -  once the observer is created, define its content within the
            subsystem.

      #. Specified properties can be validated with the menu option
         *“Verify properties using ...”* when selecting one of the
         proposed solvers.

      #. Make sure the selected solver is installed (e.g. Zustre, Kind2
         and or JKind) and configured in ``tools/tools_config.m``.

      #. A GUI will pop up and provide feedback of verification process.

   -  If you want to **analyze the C code generated by Simulink Coder**
      of your model.

      #. Go to *“Analyze C generated code”*

      #. Choose one of the proposed analyzer (e.g. IKOS or SeaHorn)

      #. make sure they are installed and configured in *config.m*.

   -  If you want to **View generated Invariants**

      -  It only works with Zustre for the moment. Run Zustre verifier
         on your model.

      -  Then click on *“View generated Invariants”*

   -  You can also **Compile your model to C or Rust** by clicking on
      generate code and choose the target language.

.. [1]
   https://www.mathworks.com/help/simulink/model-reference.html
>>>>>>> 33751cd1584294015f5d021e51682f427cdebad9
