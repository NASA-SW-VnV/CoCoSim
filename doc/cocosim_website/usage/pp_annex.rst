Supported blocks
================

| The blocks registered in this section are converted into a
  CoCoSim-friendly equivalent, but certain option may not be handled by
  the translation. Some of the blocks are complex and need a very
  customized handling, the blocks to replace them are generated by
  matlab scripts. Other blocks are very similar each time you find them
  in a model, these blocks are replaced by generic blocks that are
  contained in the file ``gal_lib.slx`` contained in the ``cocosim/lib``
  folder.  

-  **Clock or Digital clock** : Replace by a CoCoSim-friendly block
   provided in the ``gal_lib.slx`` located in ``src/pp/lib/common``. We
   recommend to use Digital clock as it is discrete.

   | Details : The clock is basically an integrator of the constant
     Sample time of the Simulink model.  

-  **Integrator** : Replace by a CoCoSim-friendly block provided in the
   ``gal_lib.slx`` located in ``src/pp/lib/common``. Supported options :

   -  ``InitialConditionSource``: internal/external

   -  ``External reset``: we support all reset options

   |   Details : We do not recommend using Continuous integrator as its
     semantic is different from the discrete one, so the outputs are not
     the same. The best way is to use directly the discrete integrator.
      

-  **Discrete Integrator** : Replace by a CoCoSim-friendly block
   provided in the ``gal_lib.slx`` located in ``src/pp/lib/common``.
   Supported options :

   -  ``Integration method``: Integration: Forward Euler

   -  ``InitialConditionSource``: internal/external

   -  ``External reset``: we support all reset options

   | Details : The blocks provided in ``gal_lib.slx`` have the expected
     behavior if the sample time of sum blocks are respected by CoCoSim,
     CoCoSim try to use the Simulink model sample time while
     compilation.  

-  **Dead Zone** : Replace by a CoCoSim-friendly block provided in the
   ``gal_lib.slx`` located in ``src/pp/lib/common``. Supported options:

   -  ``LowerValue``

   -  ``UpperValue``

   |  

-  **Dynamic Dead Zone** : Replace by a CoCoSim-friendly block provided
   in the ``gal_lib.slx`` located in ``src/pp/lib/common``. Supported
   options:

   -  ``LowerValue``

   -  ``UpperValue``

   | Details : To modify the behavior of these blocks, you must modify
     their replacements in ``gal_lib.slx``.  

-  | **DiscreteStateSpace** : Replace by a CoCoSim-friendly block
     generated from the state space representation.  
   | **Dynamic Saturation** : Replace by a CoCoSim-friendly block
     provided in the ``gal_lib.slx`` located in ``src/pp/lib/common``.
     Supported options:

   -  ``LowerLimit``

   -  ``UpperLimit``

   | Details : To modify the behavior of these blocks, you must modify
     their replacements in ``gal_lib.slx``.  

-  **Function** : Replaced by a subsystem containing the calculation
   made by blocks. In case of the pre-processing does not succeed, we
   have a second choice of translating directly the Function expression
   using regular expression. The matlab function that handles this block
   is in ``src/middleEnd/write_function_block``.

   | Details : a python parser called from Matlab gives a tree of the
     mathematical expression which is converted into blocks with only
     variables and figures stored in constant blocks. The the parser
     recognize any function by default (of the form ’func(arg)’), the
     handling of new functions has to be added in ``expression_process``
     located in ``src/pp/lib/math``.  

-  | **FromWorkspace** : Replaced by an input in the first level system.
     The goal is to provide this input as a variable for PKind tests.  

-  **Goto/From** : Create lines between blocks that have the same "tag".
   Supported options :

   -  ``TagVisibility``: global/local

   | Details : This function also create inputs/outputs to some
     subsystems in order to link together the blocks.  

-  **Lookup tables** : Replaced by a subsystem providing an
   interpolation based on table provided (from the initial block) during
   the process. Supported options:

   -  ``InputValues``

   -  ``Table data``

   -  ``Lookup method: Interpolation-Use End Values``

    

-  **Lookup tables nD** : Replaced by a subsystem providing an
   interpolation based on table provided (from the initial block) during
   the process. Supported options:

   -  ``NamberOfTableDimensions`` : 1

   -  ``BreabpointsForDimension1``

   -  ``Table``

   -  ``Lookup method: Interpolation-Use End Values``

   | Details : In this block we only support **Interpolation** method it
     means we perform linear interpolation but we do not extrapolate
     outside the end points of the input vector. Instead the block uses
     the end values.
   | One of the possible enhancement would be to handle tables with more
     than 1 dimension.  

-  **Math** : Replace Math blocks with yet unsupported operations.
   Operations handled by the script (not handled natively by CoCoSim):

   -  ``magnitude‘2``: replaced by a ``pow`` using the parsing operation
      on ’u‘2’

   |  

-  **RateTransition** : Replaced by a CoCoSim-friendly block provided in
   the ``gal_lib.slx`` located in ``src/pp/lib/common``. Supported
   options:

   -  ``OutPortSampleTime``

   -  ``X0``

   | Details : The block allow to output the ``X0`` initial condition
     during the first step of execution of the Lustre code. The output
     is also updated at a ``OutPortSampleTime`` rate, this behavior will
     be effective when CoCoSim will consider sample times provided in
     each block. If CoCoSim don’t consider different sample times, this
     block has no purpose other than the initial condition.  

-  **Saturation** : Replace by a CoCoSim-friendly block provided in the
   ``gal_lib.slx`` located in ``src/pp/lib/common``. Supported options:

   -  ``LowerLimit``

   -  ``UpperLimit``

   |  

-  **Selector** : Replace by a subsystem block containing a demux of the
   input, a mux of the output and link to the required inputs. Supported
   options:

   -  ``IndexMode``: Zero-based/One-based

   -  ``IndexOptionArray``: ’Index vercor (dialog)’ only supported. new
      options may easily be added.

   |  

-  | **ToWorkspace** : Replaced by an output in the first level system.
      

-  | **TransferFunction** : Replace by a CoCoSim-friendly block
     generated from the state space representation provided by Matlab
     from the numerator and denominator of the function.  

-  | **Zero-Pole** : Replace by a CoCoSim-friendly block generated from
     the state space representation provided by Matlab from the poles
     and zeros of the function.  

Remarks
-------

The blocks ``FromWorkspace`` are replaced by inports in the top level
layer of the model, and blocks ``ToWorkspace`` are replaced by outports
in the top level layer of the model. But these blocks can sometimes be
used to load some precise data into the model (curves from experiments
for example), and in this case, the model generated won’t support this
input of information. The block should be replaced by a lookup table
with a clock in input for example if we want this data to go threw the
compilation. Or the user can make assumptions about its input (see
section :any:`ref <sec:obs_vv>`) to give an abstraction on the
inport and use an inport instead.
